TARGET=run

SDLInclude=C:\CppLibs\SDL\SDL2\include
SDLLib=C:\CppLibs\SDL\SDL2\lib\x64

USE_SDLIMAGE = 0

# SDL_Image is not required for the engine runtime; It's only used for
# converting PNG and JPEG images into SoftwareTextures and generating palettes.
# Keeping dependencies to a minimum is always nice, so just set USE_SDLIMAGE to 0 to not
# compile or link SDL_image. All SDL_image related symbols in the source code are automatically disabled
# when passing the USE_SDLIMG=0 preprocessor macro, so it's completely safe.

!IF $(USE_SDLIMAGE) == 1

SDLIMGIncludePath=-I C:\CppLibs\SDL\SDL2\SDL2_image\SDL2_image-2.6.2\include
SDLIMGLibPath=-LIBPATH:C:\CppLibs\SDL\SDL2\SDL2_image\SDL2_image-2.6.2\lib\x64
SDLIMGLibFile=SDL2_image.lib

!ELSE

SDLIMGInclude=
SDLIMGLib=
SDLIMGLibFile=

!ENDIF

PM_SDLIMGLibPath=-LIBPATH:C:\CppLibs\SDL\SDL2\SDL2_image\SDL2_image-2.6.2\lib\x64
PM_SDLIMGLibFile=SDL2_image.lib
PM_SDLIMGIncludePath=-I C:\CppLibs\SDL\SDL2\SDL2_image\SDL2_image-2.6.2\include

CONFIG = X64


CFLAGS = -D WINDOWS -D USE_SDLIMG=$(USE_SDLIMAGE) -I $(SDLInclude) $(SDLIMGIncludePath) /EHsc
DEBUG_CFLAGS = -D WINDOWS -D USE_SDLIMG=$(USE_SDLIMAGE) -D DEBUG=1 -I $(SDLInclude) $(SDLIMGIncludePath) /EHsc
PM_CFLAGS =  -D WINDOWS -D PM -D USE_SDLIMG=1 -I $(SDLInclude) $(PM_SDLIMGIncludePath) -ENTRY:main /EHsc

LINKERFLAGS = shell32.lib SDL2.lib SDL2main.lib $(SDLIMGLibFile) -link -LIBPATH:$(SDLLib) $(SDLIMGLibPath) -SUBSYSTEM:WINDOWS -MACHINE:$(CONFIG)
DEBUG_LINKERFLAGS = shell32.lib SDL2.lib SDL2main.lib $(SDLIMGLibFile) -link -LIBPATH:$(SDLLib) $(SDLIMGLibPath) -DEBUG -ASSEMBLYDEBUG -SUBSYSTEM:CONSOLE -MACHINE:$(CONFIG)
PM_LINKERFLAGS = shell32.lib SDL2.lib SDL2main.lib $(PM_SDLIMGLibFile) -link -LIBPATH:$(SDLLib) $(PM_SDLIMGLibPath) -SUBSYSTEM:CONSOLE -MACHINE:$(CONFIG)

libTargets = global_defs.obj core.obj position.obj palette.obj rawsurface.obj softwaretexture.obj e_entity.obj e_collision.obj st_compress.obj s_compiler.obj s_script.obj gtexture.obj s_stage.obj
debug_libTargets = global_defs_d.obj core_d.obj position_d.obj palette_d.obj rawsurface_d.obj softwaretexture_d.obj e_entity_d.obj e_collision_d.obj st_compress_d.obj s_compiler_d.obj s_script_d.obj gtexture_d.obj s_stage_d.obj

lib_srcSymbols = $(SRCDIR)global_defs.cpp $(SRCDIR)core.cpp $(SRCDIR)position.cpp $(SRCDIR)palette.cpp $(SRCDIR)rawsurface.cpp $(SRCDIR)softwaretexture.cpp $(SRCDIR)e_entity.cpp $(SRCDIR)e_collision.cpp $(SRCDIR)st_compress.cpp $(SRCDIR)s_compiler.cpp $(SRCDIR)s_script.cpp $(SRCDIR)gtexture.cpp $(SRCDIR)s_stage.cpp



CC = cl -nologo
SRCDIR = src/

all: release debug pm


release: main.obj $(libTargets)
	$(CC) main.obj global_defs.obj core.obj position.obj palette.obj rawsurface.obj softwaretexture.obj e_entity.obj e_collision.obj st_compress.obj s_compiler.obj s_script.obj gtexture.obj s_stage.obj -Fe"$(TARGET).exe" $(LINKERFLAGS) 

debug: main_d.obj $(debug_libTargets)
	$(CC) main_d.obj global_defs_d.obj core_d.obj position_d.obj palette_d.obj rawsurface_d.obj softwaretexture_d.obj e_entity_d.obj e_collision_d.obj st_compress_d.obj s_compiler_d.obj s_script_d.obj gtexture_d.obj s_stage_d.obj -Fe"$(TARGET)_debug.exe" $(DEBUG_LINKERFLAGS) 

pm: $(SRCDIR)pm_core.cpp $(SRCDIR)pm_globals.cpp
	$(CC) $(PM_CFLAGS) $(SRCDIR)pm_core.cpp $(SRCDIR)pm_globals.cpp $(lib_srcSymbols) -Fe"pm.exe" $(PM_LINKERFLAGS)



# RELEASE DEPENDENCIES GO HERE
main.obj: $(SRCDIR)main.cpp
	$(CC) -c $(SRCDIR)main.cpp -Fo"main.obj" $(CFLAGS)

global_defs.obj: $(SRCDIR)global_defs.cpp $(SRCDIR)global.hpp
	$(CC) -c $(SRCDIR)global_defs.cpp -Fo"global_defs.obj" $(CFLAGS)

core.obj: $(SRCDIR)core.hpp $(SRCDIR)core.cpp
	$(CC) -c $(SRCDIR)core.cpp -Fo"core.obj" $(CFLAGS)

position.obj: $(SRCDIR)position.hpp $(SRCDIR)position.cpp
	$(CC) -c $(SRCDIR)position.cpp -Fo"position.obj" $(CFLAGS)

palette.obj: $(SRCDIR)palette.hpp $(SRCDIR)palette.cpp
	$(CC) -c $(SRCDIR)palette.cpp -Fo"palette.obj" $(CFLAGS)

rawsurface.obj: $(SRCDIR)rawsurface.hpp $(SRCDIR)rawsurface.cpp
	$(CC) -c $(SRCDIR)rawsurface.cpp -Fo"rawsurface.obj" $(CFLAGS)

softwaretexture.obj: $(SRCDIR)softwaretexture.hpp $(SRCDIR)softwaretexture.cpp
	$(CC) -c $(SRCDIR)softwaretexture.cpp -Fo"softwaretexture.obj" $(CFLAGS)

e_entity.obj: $(SRCDIR)e_entity.hpp $(SRCDIR)e_entity.cpp $(SRCDIR)e_collision.hpp
	$(CC) -c $(SRCDIR)e_entity.cpp -Fo"e_entity.obj" $(CFLAGS)


e_collision.obj: $(SRCDIR)e_collision.hpp $(SRCDIR)e_collision.cpp
	$(CC) -c $(SRCDIR)e_collision.cpp -Fo"e_collision.obj" $(CFLAGS)

st_compress.obj: $(SRCDIR)st_compress.hpp $(SRCDIR)st_compress.cpp
	$(CC) -c $(SRCDIR)st_compress.cpp -Fo"st_compress.obj" $(CFLAGS)

s_compiler.obj: $(SRCDIR)s_compiler.hpp $(SRCDIR)s_compiler.cpp
	$(CC) -c $(SRCDIR)s_compiler.cpp -Fo"s_compiler.obj" $(CFLAGS)

s_script.obj: $(SRCDIR)s_script.hpp $(SRCDIR)s_script.cpp
	$(CC) -c $(SRCDIR)s_script.cpp -Fo"s_script.obj" $(CFLAGS)

gtexture.obj: $(SRCDIR)gtexture.cpp $(SRCDIR)gtexture.hpp
	$(CC) -c $(SRCDIR)gtexture.cpp -Fo"gtexture.obj" $(CFLAGS)

s_stage.obj: $(SRCDIR)s_stage.cpp $(SRCDIR)s_stage.hpp
	$(CC) -c $(SRCDIR)s_stage.cpp -Fo"s_stage.obj" $(CFLAGS)

#DEBUG DEPENDENCIES GO HERE
main_d.obj: $(SRCDIR)main.cpp
	$(CC) -c $(SRCDIR)main.cpp -Fo"main_d.obj" $(DEBUG_CFLAGS)

global_defs_d.obj: $(SRCDIR)global_defs.cpp $(SRCDIR)global.hpp
	$(CC) -c $(SRCDIR)global_defs.cpp -Fo"global_defs_d.obj" $(DEBUG_CFLAGS)

core_d.obj: $(SRCDIR)core.hpp $(SRCDIR)core.cpp
	$(CC) -c $(SRCDIR)core.cpp -Fo"core_d.obj" $(DEBUG_CFLAGS)

position_d.obj: $(SRCDIR)position.hpp $(SRCDIR)position.cpp
	$(CC) -c $(SRCDIR)position.cpp -Fo"position_d.obj" $(DEBUG_CFLAGS)

palette_d.obj: $(SRCDIR)palette.hpp $(SRCDIR)palette.cpp
	$(CC) -c $(SRCDIR)palette.cpp -Fo"palette_d.obj" $(DEBUG_CFLAGS)

rawsurface_d.obj: $(SRCDIR)rawsurface.hpp $(SRCDIR)rawsurface.cpp
	$(CC) -c $(SRCDIR)rawsurface.cpp -Fo"rawsurface_d.obj" $(DEBUG_CFLAGS)

softwaretexture_d.obj: $(SRCDIR)softwaretexture.hpp $(SRCDIR)softwaretexture.cpp
	$(CC) -c $(SRCDIR)softwaretexture.cpp -Fo"softwaretexture_d.obj" $(DEBUG_CFLAGS)

e_entity_d.obj: $(SRCDIR)e_entity.hpp $(SRCDIR)e_entity.cpp $(SRCDIR)e_collision.hpp
	$(CC) -c $(SRCDIR)e_entity.cpp -Fo"e_entity_d.obj" $(DEBUG_CFLAGS)


e_collision_d.obj: $(SRCDIR)e_collision.hpp $(SRCDIR)e_collision.cpp
	$(CC) -c $(SRCDIR)e_collision.cpp -Fo"e_collision_d.obj" $(DEBUG_CFLAGS)
 
st_compress_d.obj: $(SRCDIR)st_compress.hpp $(SRCDIR)st_compress.cpp
	$(CC) -c $(SRCDIR)st_compress.cpp -Fo"st_compress_d.obj" $(DEBUG_CFLAGS)

s_compiler_d.obj: $(SRCDIR)s_compiler.hpp $(SRCDIR)s_compiler.cpp
	$(CC) -c $(SRCDIR)s_compiler.cpp -Fo"s_compiler_d.obj" $(DEBUG_CFLAGS)

s_script_d.obj: $(SRCDIR)s_script.hpp $(SRCDIR)s_script.cpp
	$(CC) -c $(SRCDIR)s_script.cpp -Fo"s_script_d.obj" $(DEBUG_CFLAGS)

gtexture_d.obj: $(SRCDIR)gtexture.cpp $(SRCDIR)gtexture.hpp
	$(CC) -c $(SRCDIR)gtexture.cpp -Fo"gtexture_d.obj" $(DEBUG_CFLAGS)

s_stage_d.obj: $(SRCDIR)s_stage.cpp $(SRCDIR)s_stage.hpp
	$(CC) -c $(SRCDIR)s_stage.cpp -Fo"s_stage_d.obj" $(DEBUG_CFLAGS)


clean:
	del *.obj *.pdb *.ilk
